<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Productions Index</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f3f4f6;
    }
    .sortable-header {
      cursor: pointer;
      user-select: none;
    }
    .sort-icon {
        transition: transform 0.2s ease-in-out;
    }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

  <div class="max-w-6xl w-full bg-white rounded-xl shadow-lg p-6">
    
    <header class="text-center mb-8">
      <h1 class="text-4xl font-bold text-gray-800">Productions Dashboard</h1>
      <p class="mt-2 text-gray-500">Find the latest films and series by location, status, and type.</p>
    </header>

    <div class="flex flex-col md:flex-row items-center justify-between space-y-4 md:space-y-0 md:space-x-4 mb-8">
      
      <div class="relative w-full md:w-1/3">
        <select id="location-filter" class="w-full pl-3 pr-10 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 appearance-none transition duration-200 ease-in-out">
          <option value="">All Locations</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </div>
      </div>
      
      <div class="relative w-full md:w-1/3">
        <select id="status-filter" class="w-full pl-3 pr-10 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 appearance-none transition duration-200 ease-in-out">
          <option value="">All Statuses</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </div>
      </div>
      
      <div class="relative w-full md:w-1/3">
        <select id="type-filter" class="w-full pl-3 pr-10 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 appearance-none transition duration-200 ease-in-out">
          <option value="">All Types</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
          <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </div>
      </div>

    </div>

    <div class="w-full overflow-x-auto">
      <table id="productions-table" class="min-w-full divide-y divide-gray-200 rounded-lg shadow-sm">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sortable-header" data-sort-by="title">Title <span id="title-sort-icon" class="sort-icon"></span></th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sortable-header" data-sort-by="location">Location <span id="location-sort-icon" class="sort-icon"></span></th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sortable-header" data-sort-by="status">Status <span id="status-sort-icon" class="sort-icon"></span></th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sortable-header" data-sort-by="type">Type <span id="type-sort-icon" class="sort-icon"></span></th>
          </tr>
        </thead>
        <tbody id="productions-list" class="bg-white divide-y divide-gray-200">
          <!-- Table rows will be dynamically inserted here -->
        </tbody>
      </table>
    </div>

    <div id="no-results" class="text-center text-gray-500 hidden mt-8">
      <p class="text-lg font-medium">No productions match your criteria.</p>
      <button onclick="resetFilters()" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg shadow hover:bg-blue-600 transition duration-200 ease-in-out">Reset Filters</button>
    </div>
    
    <div id="loading" class="text-center text-gray-500 mt-8">
      <p class="text-lg font-medium">Loading productions...</p>
    </div>

  </div>

  <script>
    let productions = [];
    let currentSortColumn = 'title';
    let currentSortDirection = 'asc';

    const locationFilter = document.getElementById('location-filter');
    const statusFilter = document.getElementById('status-filter');
    const typeFilter = document.getElementById('type-filter');
    const productionsList = document.getElementById('productions-list');
    const productionsTable = document.getElementById('productions-table');
    const noResultsMessage = document.getElementById('no-results');
    const loadingMessage = document.getElementById('loading');
    const sortableHeaders = document.querySelectorAll('.sortable-header');

    // Fetch productions from the Rails backend
    async function fetchProductions() {
      loadingMessage.classList.remove('hidden');
      productionsTable.classList.add('hidden');
      try {
        const response = await fetch(window.location.protocol + '//' + window.location.host + '/productions.json');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        productions = await response.json();
        
        loadingMessage.classList.add('hidden');
        productionsTable.classList.remove('hidden');

        // Initial setup with the fetched data
        populateFilters();
        filterAndSortProductions();
      } catch (error) {
        console.error('There was a problem fetching the productions:', error);
        loadingMessage.textContent = 'Failed to load productions.';
      }
    }

    // Populate initial filter options
    function populateFilters() {
      const allLocations = [...new Set(productions.map(p => p.location))];
      const allStatuses = [...new Set(productions.map(p => p.status))];
      const allTypes = [...new Set(productions.map(p => p.type))];

      populateDropdown(locationFilter, allLocations.sort());
      populateDropdown(statusFilter, allStatuses.sort());
      populateDropdown(typeFilter, allTypes.sort());
    }

    function populateDropdown(dropdown, items) {
      dropdown.innerHTML = dropdown.options[0].outerHTML; // Keep the 'All' option
      items.forEach(item => {
        const option = document.createElement('option');
        option.value = item;
        option.textContent = item;
        dropdown.appendChild(option);
      });
    }

    // Render productions based on current filters and sort order
    function renderProductions(filteredProductions) {
      productionsList.innerHTML = '';
      if (filteredProductions.length === 0) {
        productionsTable.classList.add('hidden');
        noResultsMessage.classList.remove('hidden');
      } else {
        productionsTable.classList.remove('hidden');
        noResultsMessage.classList.add('hidden');
        filteredProductions.forEach((production, index) => {
          const row = document.createElement('tr');
          row.className = index % 2 === 0 ? 'bg-white' : 'bg-gray-50'; // Stripe effect
          row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600 hover:text-blue-800">
              <a href="/productions/${production.id}">${production.title}</a>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${production.location}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${production.status}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${production.type}</td>
          `;
          productionsList.appendChild(row);
        });
      }
      updateSortIcons();
    }

    // Filter and sort productions based on selections and current sort order
    function filterAndSortProductions() {
      const selectedLocation = locationFilter.value;
      const selectedStatus = statusFilter.value;
      const selectedType = typeFilter.value;
      
      let filtered = productions.filter(p => {
        const locationMatch = !selectedLocation || p.location === selectedLocation;
        const statusMatch = !selectedStatus || p.status === selectedStatus;
        const typeMatch = !selectedType || p.type === selectedType;
        return locationMatch && statusMatch && typeMatch;
      });
      
      // Apply sorting to the filtered list
      filtered.sort((a, b) => {
        const aValue = a[currentSortColumn] || '';
        const bValue = b[currentSortColumn] || '';
        if (aValue < bValue) return currentSortDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return currentSortDirection === 'asc' ? 1 : -1;
        return 0;
      });

      renderProductions(filtered);
      updateFilterOptions(selectedLocation, selectedStatus, selectedType);
    }
    
    // Update other filter options based on current selections
    function updateFilterOptions(selectedLocation, selectedStatus, selectedType) {
        let dynamicLocations = productions;
        let dynamicStatuses = productions;
        let dynamicTypes = productions;

        // Filter other options based on current selections
        if (selectedStatus) {
            dynamicLocations = dynamicLocations.filter(p => p.status === selectedStatus);
            dynamicTypes = dynamicTypes.filter(p => p.status === selectedStatus);
        }
        if (selectedType) {
            dynamicLocations = dynamicLocations.filter(p => p.type === selectedType);
            dynamicStatuses = dynamicStatuses.filter(p => p.type === selectedType);
        }
        if (selectedLocation) {
            dynamicStatuses = dynamicStatuses.filter(p => p.location === selectedLocation);
            dynamicTypes = dynamicTypes.filter(p => p.location === selectedLocation);
        }
        
        const validLocations = [...new Set(dynamicLocations.map(p => p.location))];
        const validStatuses = [...new Set(dynamicStatuses.map(p => p.status))];
        const validTypes = [...new Set(dynamicTypes.map(p => p.type))];

        populateDropdown(locationFilter, validLocations.sort());
        populateDropdown(statusFilter, validStatuses.sort());
        populateDropdown(typeFilter, validTypes.sort());
        
        // Re-select the chosen values to prevent them from being reset
        locationFilter.value = selectedLocation;
        statusFilter.value = selectedStatus;
        typeFilter.value = selectedType;
    }

    // Reset all filters to their default state
    function resetFilters() {
      locationFilter.value = '';
      statusFilter.value = '';
      typeFilter.value = '';
      populateFilters();
      filterAndSortProductions();
    }
    
    function updateSortIcons() {
      document.querySelectorAll('.sort-icon').forEach(icon => icon.textContent = '');
      const iconElement = document.getElementById(`${currentSortColumn}-sort-icon`);
      if (iconElement) {
        iconElement.textContent = currentSortDirection === 'asc' ? ' ▲' : ' ▼';
      }
    }

    // Event Listeners for filters
    locationFilter.addEventListener('change', filterAndSortProductions);
    statusFilter.addEventListener('change', filterAndSortProductions);
    typeFilter.addEventListener('change', filterAndSortProductions);

    // Event Listener for sortable headers
    sortableHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const sortColumn = header.dataset.sortBy;
        if (sortColumn === currentSortColumn) {
          currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
        } else {
          currentSortColumn = sortColumn;
          currentSortDirection = 'asc';
        }
        filterAndSortProductions();
      });
    });


    // Initial render
    fetchProductions();
  </script>

</body>
</html>
